<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx.xsd ">

                <!--Spring的配置文件，主要配置和业务逻辑相关的，如数据源，事务控制等-->

    <!-- ===============================持久层配置========================================= -->

                                    <!--导入资源文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

                                    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init">
        <property name="driverClassName" value="${dataSource.driverClass}"></property>
        <property name="url" value="${dataSource.jdbcUrl}"></property>
        <property name="username" value="${dataSource.username}"></property>
        <property name="password" value="${dataSource.password}"></property>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="1"></property>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="1" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />

        <property name="validationQuery">
            <value>SELECT 1</value>
        </property>
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

        <!-- 监控数据库 -->
        <!-- <property name="filters" value="stat" /> -->
        <property name="filters" value="mergeStat,log4j,wall" />
    </bean>

                                            <!--Mybatis Plus 配置-->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!--引用数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置实体扫描路径 mapper.xml文件的类引用直接写类名，不用写全类名 多个package用逗号隔开-->
        <property name="typeAliasesPackage" value="com.wk.entity"/>
        <!--指定mapper.xml文件位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!-- 注入MyBatisPlus全局策略配置 -->
        <property name="globalConfig" ref="globalConfig"/>
        <!-- 配置分页插件 -->
        <property name="plugins">
            <!--<array>  pageHelper分页
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>-->

            <list>
                <!--MyBatisPlus分页插件-->
                <bean class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"/>

                <!--SQL阻断解析器，可以避免删除全表数据，开发环境使用-->
                <bean class="com.baomidou.mybatisplus.extension.plugins.SqlExplainInterceptor">
                    <property name="sqlParserList">
                        <list>
                            <bean class="com.baomidou.mybatisplus.extension.parsers.BlockAttackSqlParser"/>
                        </list>
                    </property>
                </bean>

            </list>
        </property>
    </bean>

    <!--声明全局配置-->
    <bean id="globalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <property name="dbConfig">
            <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
                <!--主键规则 设置主键策略为数据库自增-->
                <property name="idType" value="AUTO"/>
            </bean>
        </property>
    </bean>

    <!--扫描器，将mapper接口的实现类加入到IOC容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的时间，并加入到IOC容器中-->
        <property name="basePackage" value="com.wk.mapper"/>
        <!-- 注入sqlSessionFactory
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
    </bean>

    <!-- =========================业务层配置===================================== -->

    <!--扫描除controller以外的包-->
    <context:component-scan base-package="com.wk.service.impl"/>

    <!--事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制数据源，把数据提交给数据库-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置声明式事务-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 声明具体哪些方法中有事务控制，支持通配符 -->
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="query*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!--配置AOP切点-->
    <aop:config>
        <!-- 声明式事务是基于advice通知，所以需要声明切点，范围 service实现类中所有方法 -->
        <aop:pointcut id="txPoint" expression="execution(* com.wk.service.impl..*(..))"/>
        <!--引用声明式事务-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!--引入shiro配置文件
    <import resource="classpath:application-shiro.xml" />-->
</beans>
