<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
           http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">

    <!--Spring配置文件，启动Spring容器-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

    <!--Spring的监听器，监听到项目启动后就会去加载指定的Spring的配置文件-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--SpringMVC的核心控制器，拦截所有请求-->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!--指定SpringMVC的配置文件-->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMVC.xml</param-value>
        </init-param>
        <!--随着服务器的启动而启动-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--
	shiro过虑器，DelegatingFilterProxy通过代理模式将spring容器中的bean和filter关联起来
	DelegatingFilterProxy 实际上是 Filter 的一个代理对象. 默认情况下, Spring 会到 IOC 容器中查找和
	<filter-name> 对应的 filter bean. 也可以通过 targetBeanName 的初始化参数来配置 filter bean 的 id.
	-->
    <!--<filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param> &lt;!&ndash; 设置true由servlet容器控制filter的生命周期  &ndash;&gt;
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        &lt;!&ndash;过滤器只针对经过前端控制器的请求才有用 也可以这样配置&ndash;&gt;
        <servlet-name>SpringMVC</servlet-name>
        &lt;!&ndash;拦截所有
        <url-pattern>/*</url-pattern>&ndash;&gt;
    </filter-mapping>-->

    <!--字符编码过滤器,因为过滤器有执行先后顺序，所以字符编码过滤器必须放在所有过滤器之前-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <!--指定字符编码集-->
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <!--请求使用指定的编码集-->
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <!--响应使用指定的编码集-->
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <!--过滤器只针对经过前端控制器的请求才有用 也可以这样配置-->
        <servlet-name>SpringMVC</servlet-name>
        <!--拦截所有
        <url-pattern>/*</url-pattern>-->
    </filter-mapping>

    <!--restful风格URI，将页面发送到后台的post请求转为指定的restful风格请求-->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <welcome-file-list>
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>

    <!--直接发送put请求Tomcat不会封装数据，设置put请求过滤器,把put请求体中的数据解析包装成一个map
    request对象被重新包装，getParameter()方法被重写，发送put请求也可以获取到参数-->
    <filter>
        <filter-name>HttpPutFormContentFilter</filter-name>
        <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HttpPutFormContentFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- druid的监控页面配置开始 -->
    <servlet>
        <servlet-name>StatViewServlet</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
        <!-- 配置登陆名 -->
        <init-param>
            <param-name>loginUsername</param-name>
            <param-value>root</param-value>
        </init-param>
        <!-- 配置密码 -->
        <init-param>
            <param-name>loginPassword</param-name>
            <param-value>123456</param-value>
        </init-param>
        <!-- 设置白名单 -->
        <init-param>
            <param-name>allow</param-name>
            <!-- 			<param-value>192.168.1.1,192.168.2.4</param-value>s-->
            <param-value></param-value>
        </init-param>
        <!-- 设置黑名单 -->
        <init-param>
            <param-name>deny</param-name>
            <param-value></param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>StatViewServlet</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>


    <filter>
        <filter-name>WebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <!-- 注入过滤的样式文件 -->
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>WebStatFilter</filter-name>
        <servlet-name>StatViewServlet</servlet-name>
    </filter-mapping>

    <!-- druid的监控页面配置结束 -->
</web-app>